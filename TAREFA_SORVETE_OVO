#include <stdio.h>
#include <stdlib.h>
#include <GL/glut.h>
#include <math.h>

#define PI 3.141592653898
#define janela_altura 400
#define janela_largura 600


void resize(GLsizei w, GLsizei h);
void display(void);


int main(int arcg, char** arcv)
{
	glutInit(&arcg, arcv);

	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);

	glutInitWindowSize(janela_altura, janela_largura);
	glutInitWindowPosition(10, 300);
	glutCreateWindow("CIRCULO");

	glutReshapeFunc(&resize);

	glutDisplayFunc(display);

	glutMainLoop();

	return EXIT_SUCCESS;

}

void desenhar()
{
	glPushMatrix();

	glTranslatef(0, 100, 0);

	GLfloat circ_pnt = 100;
	GLfloat ang, ang2,ang3, ang4,ang5,ang6 ,raioX = 30.0f, raioY = 30.0f;

	glColor3f(1.0, 1.0, 0.0);
	glBegin(GL_POLYGON);

	for (int i = 0; i < circ_pnt; i++)
	{
		ang = (2 * PI * i) / circ_pnt;
		glVertex2f(cos(ang) * raioX, sin(ang) * raioY);
		printf("%f    %f\n", cos(ang) * raioX, sin(ang) * raioY);

	}
	glEnd();

	glPopMatrix();

	//morango
	glPushMatrix();

	glTranslatef(30, 100, 0);


	glColor3f(1,0,1);
	
	glBegin(GL_POLYGON);

	for (int i = 0; i < circ_pnt; i++)
	{
		ang2 = (2 * PI * i) / circ_pnt;
		glVertex2f(cos(ang2) * raioX, sin(ang2) * raioY);
		printf("%f    %f\n", cos(ang2) * raioX, sin(ang2) * raioY);

	}
	glEnd();

	glPopMatrix();

	// chocolate
	glPushMatrix();

	glTranslatef(15, 120, 0);

	
	glColor3f(0.5, 0, 0);


	glBegin(GL_POLYGON);

	for (int i = 0; i < circ_pnt; i++)
	{
		ang3 = (2 * PI * i) / circ_pnt;
		glVertex2f(cos(ang3) * raioX, sin(ang3) * raioY);
		printf("%f    %f\n", cos(ang3) * raioX, sin(ang3) * raioY);

	}
	glEnd();

	glPopMatrix();

	//creme 2 

	glPushMatrix();

	glTranslatef(200, 100, 0);

	glColor3f(1.0, 1.0, 0.0);
	glBegin(GL_POLYGON);

	for (int i = 0; i < circ_pnt; i++)
	{
		ang4 = (2 * PI * i) / circ_pnt;
		glVertex2f(cos(ang4) * raioX, sin(ang4) * raioY);
		printf("%f    %f\n", cos(ang4) * raioX, sin(ang4) * raioY);

	}
	glEnd();

	glPopMatrix();

	//morango 2
	glPushMatrix();

	glTranslatef(230, 100, 0);


	glColor3f(1, 0, 1);

	glBegin(GL_POLYGON);

	for (int i = 0; i < circ_pnt; i++)
	{
		ang5 = (2 * PI * i) / circ_pnt;
		glVertex2f(cos(ang5) * raioX, sin(ang5) * raioY);
		printf("%f    %f\n", cos(ang5) * raioX, sin(ang5) * raioY);

	}
	glEnd();

	glPopMatrix();

	//CHOCOLATE 2
	glPushMatrix();

	glTranslatef(215, 120, 0);


	glColor3f(0.5, 0, 0);

	glBegin(GL_POLYGON);

	for (int i = 0; i < circ_pnt; i++)
	{
		ang6 = (2 * PI * i) / circ_pnt;
		glVertex2f(cos(ang6) * raioX, sin(ang6) * raioY);
		printf("%f    %f\n", cos(ang6) * raioX, sin(ang6) * raioY);

	}
	glEnd();

	glPopMatrix();

	//OVO ////////////////////////////////////////////////////////////

	
	GLfloat ang_ovo ,raioX_ovo = 70.0f, raioY_ovo = 120.0f;

	glPushMatrix();

	glTranslatef(400, 0, 0);


	glColor3f(1, 0, 0);

	glBegin(GL_POLYGON);

	for (int i = 0; i < circ_pnt; i++)
	{
		ang_ovo = (2 * PI * i) / circ_pnt;
		glVertex2f(cos(ang_ovo) * raioX_ovo, sin(ang_ovo) * raioY_ovo);
		printf("%f    %f\n", cos(ang_ovo) * raioX_ovo, sin(ang_ovo) * raioY_ovo);

	}
	glEnd();

	glPopMatrix();

	//TRIANGULOS//////////////////////////

	glPushMatrix();

	glTranslatef(20, 30, 0);

	glColor3f(1, 0.9, 0.7);
	glBegin(GL_TRIANGLES);
	glVertex3f(40.0, 40.0, 0.0);
	glVertex3f(-40.0, 40.0, 0.0);
	glVertex3f(-7.0, -40.0, 0.0);
	
	glEnd();

	glPopMatrix();

	glPushMatrix();

	glTranslatef(220, 30, 0);

	glColor3f(1, 0.9, 0.7);
	glBegin(GL_TRIANGLES);
	glVertex3f(40.0, 40.0, 0.0);
	glVertex3f(-40.0, 40.0, 0.0);
	glVertex3f(-7.0, -40.0, 0.0);

	glEnd();

	glPopMatrix();

	glPushMatrix();

	glTranslatef(410, 150, 0);

	glColor3f(1, 0, 0);
	glBegin(GL_TRIANGLES);
	glVertex3f(40.0, 40.0, 0.0);
	glVertex3f(-40.0, 40.0, 0.0);
	glVertex3f(-7.0, -40.0, 0.0);
	glEnd();

	
}

void resize(GLsizei w, GLsizei h)
{
	if (h == 0)
		h = 1;

	glViewport(0, 0, w, h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();

	if (w <= h) {
		gluOrtho2D(0.0f, janela_altura, 0.0f, janela_largura * h / w);
	}
	else {
		gluOrtho2D(0.0f, janela_altura * w / h, 0.0f, janela_largura);
	}
	glMatrixMode(GL_MODELVIEW);
}

void display() {

	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	glClearColor(0.0f, 0.0f, 1.0f, 0.0f);
	glClear(GL_COLOR_BUFFER_BIT);
	glTranslatef(janela_altura / 2, janela_largura / 2, 0.0f);

	glViewport(0, 0, janela_largura, janela_altura);
	desenhar();

	glFlush();
}
